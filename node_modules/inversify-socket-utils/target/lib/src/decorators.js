"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.socketRooms = exports.socketRequest = exports.socketQueryParam = exports.payload = exports.connectedSocket = exports.socketID = exports.socketIO = exports.params = exports.onMessage = exports.onDisconnect = exports.onConnect = exports.controller = void 0;
require("reflect-metadata");
const constants_1 = require("./constants");
const controller = (namespace) => (target) => {
    const currentMetadata = {
        namespace,
        target,
    };
    Reflect.defineMetadata(constants_1.METADATA_KEY.Controller, currentMetadata, target);
    const previousMetadata = Reflect.getMetadata(constants_1.METADATA_KEY.Controller, Reflect) || [];
    const newMetadata = [currentMetadata, ...previousMetadata];
    Reflect.defineMetadata(constants_1.METADATA_KEY.Controller, newMetadata, Reflect);
};
exports.controller = controller;
const onConnect = (name) => (target, key) => {
    const metadata = {
        key,
        name,
        target,
        type: constants_1.ACTION_TYPE.CONNECT,
    };
    let metadataList = [];
    if (Reflect.hasMetadata(constants_1.METADATA_KEY.Action, target.constructor)) {
        metadataList = Reflect.getMetadata(constants_1.METADATA_KEY.Action, target.constructor);
    }
    else {
        Reflect.defineMetadata(constants_1.METADATA_KEY.Action, metadataList, target.constructor);
    }
    metadataList.push(metadata);
};
exports.onConnect = onConnect;
const onDisconnect = (name) => (target, key) => {
    const metadata = {
        key,
        name,
        target,
        type: constants_1.ACTION_TYPE.DISCONNECT,
    };
    let metadataList = [];
    if (Reflect.hasMetadata(constants_1.METADATA_KEY.Action, target.constructor)) {
        metadataList = Reflect.getMetadata(constants_1.METADATA_KEY.Action, target.constructor);
    }
    else {
        Reflect.defineMetadata(constants_1.METADATA_KEY.Action, metadataList, target.constructor);
    }
    metadataList.push(metadata);
};
exports.onDisconnect = onDisconnect;
const onMessage = (name) => (target, key) => {
    const metadata = {
        key,
        name,
        target,
        type: constants_1.ACTION_TYPE.MESSAGE,
    };
    let metadataList = [];
    if (Reflect.hasMetadata(constants_1.METADATA_KEY.Action, target.constructor)) {
        metadataList = Reflect.getMetadata(constants_1.METADATA_KEY.Action, target.constructor);
    }
    else {
        Reflect.defineMetadata(constants_1.METADATA_KEY.Action, metadataList, target.constructor);
    }
    metadataList.push(metadata);
};
exports.onMessage = onMessage;
const params = (type, name) => (target, methodName, index) => {
    let metadataList = {};
    let parameterMetadataList = [];
    const parameterMetadata = {
        index: index,
        name: name,
        type: type,
    };
    if (Reflect.hasMetadata(constants_1.METADATA_KEY.Parameter, target.constructor)) {
        metadataList = Reflect.getMetadata(constants_1.METADATA_KEY.Parameter, target.constructor);
        if (Object.prototype.hasOwnProperty.call(metadataList, methodName)) {
            parameterMetadataList = metadataList[methodName];
        }
        parameterMetadataList.unshift(parameterMetadata);
    }
    else {
        parameterMetadataList.unshift(parameterMetadata);
    }
    metadataList[methodName] = parameterMetadataList;
    Reflect.defineMetadata(constants_1.METADATA_KEY.Parameter, metadataList, target.constructor);
};
exports.params = params;
const paramDecoratorFactory = (parameterType) => (name) => (0, exports.params)(parameterType, name || "default");
exports.socketIO = paramDecoratorFactory(constants_1.PARAMETER_TYPE.SOCKET_IO);
exports.socketID = paramDecoratorFactory(constants_1.PARAMETER_TYPE.SOCKET_ID);
exports.connectedSocket = paramDecoratorFactory(constants_1.PARAMETER_TYPE.CONNECTED_SOCKET);
exports.payload = paramDecoratorFactory(constants_1.PARAMETER_TYPE.SOCKET_BODY);
exports.socketQueryParam = paramDecoratorFactory(constants_1.PARAMETER_TYPE.SOCKET_QUERY_PARAM);
exports.socketRequest = paramDecoratorFactory(constants_1.PARAMETER_TYPE.SOCKET_REQUEST);
exports.socketRooms = paramDecoratorFactory(constants_1.PARAMETER_TYPE.SOCKET_ROOMS);
//# sourceMappingURL=decorators.js.map